# This file was generated based on ".graphqlconfig". Do not edit manually.

#import UserOrderByInput, PostOrderByInput, CommentOrderByInput from './generated/prisma.graphql'

schema {
    query: Query
    mutation: Mutation
}

type Comment {
    author: User!
    id: ID!
    post: Post!
    text: String!
    createdAt: String!
    updatedAt: String!
}

type Mutation {
    createComment(data: CreateCommentInput): Comment!
    createPost(data: CreatePostInput): Post!
    createUser(data: CreateUserInput): AuthPayload!
    login(data : LoginUserInput!) : AuthPayload!
    deleteComment(id: ID!): Comment!
    deletePost(id: ID!): Post!
    deleteUser : User!
    updateUser(data : UpdateUserInput): User!
    updatePost(id: ID!, data : UpdatePostInput): Post!
    updateComment(id: ID!, data: UpdateCommentInput): Comment!
}

type Post {
    author: User!
    body: String!
    comments: [Comment!]!
    id: ID!
    published: Boolean!
    title: String!
    createdAt: String!
    updatedAt: String!
}

type Query {
    comments(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment!]!
    me: User!
    post(id : ID!): Post!
    posts(query: String, first:Int , skip:Int, after: String, orderBy: PostOrderByInput): [Post!]!
    myPosts(query : String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput) : [Post!]!
    users(query: String, first: Int, skip: Int, after:String, orderBy: UserOrderByInput): [User!]!
}

type Subscription {
    count : Int!
    comment(postId : ID!) : CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
    myPosts: PostSubscriptionPayload!
}

type User {
    comments: [Comment!]!
    email: String
    password : String!
    id: ID!
    name: String!
    posts: [Post!]!
    createdAt: String!
    updatedAt: String!
}

type AuthPayload {
    token : String!
    user  : User!

}

input CreateCommentInput {
    post: ID!
    text: String!
}

input CreatePostInput {
    body: String!
    published: Boolean!
    title: String!
}

input CreateUserInput {
    email: String!
    name: String!
    password : String!
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    name : String
    email : String
    password : String
}

input UpdatePostInput {
    title : String
    body : String
    published : Boolean
}

input UpdateCommentInput{
    text : String
}


enum  MutationType {
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload{
    mutation : String!
    node     : Post
}

type CommentSubscriptionPayload{
    mutation : MutationType!
    node     : Comment
}
